function featureTable = diagnosticFeatures_streaming(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A timetable.
%
% Output:
%  featureTable: A table containing all features.
%
% This function computes features:
%  Signal_tsmodel/Coef3
%  Signal_tsmodel/Freq1
%  Signal_tsmodel/Mean
%  Signal_tsmodel/RMS
%  Signal_tsfeat/ACF1
%  Signal_tsfeat/PACF1
%  Signal_tsmodel_2/Freq1
%  Signal_tsmodel_2/AIC
%  Signal_tsmodel_2/Mean
%  Signal_tsmodel_2/RMS
%
% % Additional Features
% %  Signal_tsmodel/Coef1
% % Signal_tsmodel/Coef2
% % Signal_tsmodel/AIC
% % Signal_tsmodel_1/Freq1
% % Signal_tsmodel_1/Mean
% % Signal_tsmodel_1/RMS
% % Signal_tsfeat_2/ACF1
% % Signal_tsfeat_2/PACF1
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

%   Copyright 2023 The MathWorks, Inc.

% Auto-generated by MATLAB on 21-Jun-2023 15:56:13

% Initialize feature table.
featureTable = table;

% Get all input variables.
Signal = inputData.Signal{:};
iv = (0:1:(height(Signal)-1)*1)';
Signal.Sample = iv;

%% TimeSeriesModelFeatures
% Compute model-based time series features.
x = Signal.Signal1;
t = Signal.Sample;
y = x - mean(x,'omitnan');
N = numel(x);

% Estimate autoregressive model.
p = 5;
R = xcorr(y,p,'biased');
R(1:p) = [];
a = zeros(1, p+1);
[tmp_a,Ep] = levinson(R,p);
a(1:end) = tmp_a(1:numel(a));

% Compute effective sampling rate.
tNumeric = time2num(t,"seconds");
Fs = effectivefs(tNumeric);

% Compute model poles.
r = sort(roots(a),'descend');
s = Fs*log(r);
Fn = abs(s)/2/pi;
Zn = -real(s)./abs(s);

% Estimate process noise.
w = filter(a,1,y);

% Estimate model residuals.
e = filter(a,1,x);

% Extract individual feature values.
Coef1 = a(2);
Coef2 = a(3);
Coef3 = a(4);
AIC = log(Ep) + 2*p/N;
Freq1 = Fn(1);
Mean = mean(e,'omitnan');
RMS = rms(e,'omitnan');

% Concatenate signal features.
featureValues = [Coef1, Coef2, Coef3, AIC, Freq1,Mean,RMS];

% Package computed features into a table.
featureNames = {'Coef1','Coef2','Coef3','AIC','Freq1','Mean','RMS'};
Signal_tsmodel = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['Signal_tsmodel/' featureNames{ct}];
end
Signal_tsmodel = renamevars(Signal_tsmodel, featureNames, newFeatureNames);
featureTable = [featureTable, Signal_tsmodel];

%% TimeSeriesModelFeatures
% Compute model-based time series features.
x = Signal.Signal2;
t = Signal.Sample;
y = x - mean(x,'omitnan');
N = numel(x);

% Estimate autoregressive model.
p = 5;
R = xcorr(y,p,'biased');
R(1:p) = [];
a = zeros(1, p+1);
[tmp_a,Ep] = levinson(R,p);
a(1:end) = tmp_a(1:numel(a));

% Compute effective sampling rate.
tNumeric = time2num(t,"seconds");
Fs = effectivefs(tNumeric);

% Compute model poles.
r = sort(roots(a),'descend');
s = Fs*log(r);
Fn = abs(s)/2/pi;
Zn = -real(s)./abs(s);

% Estimate process noise.
w = filter(a,1,y);

% Estimate model residuals.
e = filter(a,1,x);

% Extract individual feature values.
Freq1 = Fn(1);
Mean = mean(e,'omitnan');
RMS = rms(e,'omitnan');

% Concatenate signal features.
featureValues = [Freq1,Mean,RMS];

% Package computed features into a table.
featureNames = {'Freq1','Mean','RMS'};
Signal_tsmodel_1 = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['Signal_tsmodel_1/' featureNames{ct}];
end
Signal_tsmodel_1 = renamevars(Signal_tsmodel_1, featureNames, newFeatureNames);
featureTable = [featureTable, Signal_tsmodel_1];

%% TimeSeriesFeatures
% Compute time series features.
inputSignal = Signal.Signal3;

N = 10;
acf = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
acf = acf(N+2:end)';

N = 5;
rho = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
rho = rho(N+1:end);
pacf = zeros(1,N);
for L = 1:N
    ar = levinson(rho(1:L+1), L+1);
    pacf(L) = -ar(end);
end

% Extract individual feature values.
ACF1 = acf(1);
PACF1 = pacf(1);

% Concatenate signal features.
featureValues = [ACF1,PACF1];

% Package computed features into a table.
featureNames = {'ACF1','PACF1'};
Signal_tsfeat = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['Signal_tsfeat/' featureNames{ct}];
end
Signal_tsfeat = renamevars(Signal_tsfeat, featureNames, newFeatureNames);
featureTable = [featureTable, Signal_tsfeat];

%% TimeSeriesModelFeatures
% Compute model-based time series features.
x = Signal.Signal3;
t = Signal.Sample;
y = x - mean(x,'omitnan');
N = numel(x);

% Estimate autoregressive model.
p = 5;
R = xcorr(y,p,'biased');
R(1:p) = [];
a = zeros(1, p+1);
[tmp_a,Ep] = levinson(R,p);
a(1:end) = tmp_a(1:numel(a));

% Compute effective sampling rate.
tNumeric = time2num(t,"seconds");
Fs = effectivefs(tNumeric);

% Compute model poles.
r = sort(roots(a),'descend');
s = Fs*log(r);
Fn = abs(s)/2/pi;
Zn = -real(s)./abs(s);

% Estimate process noise.
w = filter(a,1,y);

% Estimate model residuals.
e = filter(a,1,x);

% Extract individual feature values.
Freq1 = Fn(1);
AIC = log(Ep) + 2*p/N;
Mean = mean(e,'omitnan');
RMS = rms(e,'omitnan');

% Concatenate signal features.
featureValues = [Freq1,AIC,Mean,RMS];

% Package computed features into a table.
featureNames = {'Freq1','AIC','Mean','RMS'};
Signal_tsmodel_2 = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['Signal_tsmodel_2/' featureNames{ct}];
end
Signal_tsmodel_2 = renamevars(Signal_tsmodel_2, featureNames, newFeatureNames);
featureTable = [featureTable, Signal_tsmodel_2];

%% TimeSeriesFeatures
% Compute time series features.
inputSignal = Signal.Signal3;

N = 10;
acf = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
acf = acf(N+2:end)';

N = 5;
rho = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
rho = rho(N+1:end);
pacf = zeros(1,N);
for L = 1:N
    ar = levinson(rho(1:L+1), L+1);
    pacf(L) = -ar(end);
end

% Extract individual feature values.
ACF1 = acf(1);
PACF1 = pacf(1);

% Concatenate signal features.
featureValues = [ACF1,PACF1];

% Package computed features into a table.
featureNames = {'ACF1','PACF1'};
Signal_tsfeat_2 = array2table(featureValues,'VariableNames',featureNames);

% Append computed features to featureTable.
newFeatureNames = cell(1, numel(featureNames));
for ct = 1:numel(featureNames)
    newFeatureNames{ct} = ['Signal_tsfeat_2/' featureNames{ct}];
end
Signal_tsfeat_2 = renamevars(Signal_tsfeat_2, featureNames, newFeatureNames);
featureTable = [featureTable, Signal_tsfeat_2];

end

% LocalWords:  tsmodel Coef tsfeat ACF PACF omitnan
