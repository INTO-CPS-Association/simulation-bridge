function [featureTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes features:
%  Signal_tsmodel/Coef3
%  Signal_tsmodel/Freq1
%  Signal_tsmodel/Mean
%  Signal_tsmodel/RMS
%  Signal_tsfeat/ACF1
%  Signal_tsfeat/PACF1
%  Signal_tsmodel_2/Freq1
%  Signal_tsmodel_2/AIC
%  Signal_tsmodel_2/Mean
%  Signal_tsmodel_2/RMS
%
% % % Additional Features
% %  Signal_tsmodel/Coef1
% % Signal_tsmodel/Coef2
% % Signal_tsmodel/AIC
% % Signal_tsmodel_1/Freq1
% % Signal_tsmodel_1/Mean
% % Signal_tsmodel_1/RMS
% % Signal_tsfeat_2/ACF1
% % Signal_tsfeat_2/PACF1
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

%   Copyright 2023 The MathWorks, Inc.

% Auto-generated by MATLAB on 21-Jun-2023 15:55:54

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',"Signal",'ConditionVariables',"Anomaly");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new signal or feature names to DataVariables.
outputEnsemble.DataVariables = unique([outputEnsemble.DataVariables;"Signal_tsmodel";"Signal_tsmodel_1";"Signal_tsfeat";"Signal_tsmodel_2";"Signal_tsfeat_2"],'stable');

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = "Signal";

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Get all input variables.
    Signal = readMemberData(member,"Signal",["Signal1","Signal2","Signal3"]);
    iv = (0:1:(height(Signal)-1)*1)';
    Signal.Sample = iv;

    % Initialize a table to store results.
    memberResult = table;

    %% TimeSeriesModelFeatures
    try
        % Compute model-based time series features.
        x = Signal.Signal1;
        t = Signal.Sample;
        y = x - mean(x,'omitnan');
        N = numel(x);

        % Estimate autoregressive model.
        p = 5;
        R = xcorr(y,p,'biased');
        R(1:p) = [];
        [a,Ep] = levinson(R,p);

        % Compute effective sampling rate.
        tNumeric = time2num(t,"seconds");
        Fs = effectivefs(tNumeric);

        % Compute model poles.
        r = sort(roots(a),'descend');
        s = Fs*log(r);
        Fn = abs(s)/2/pi;
        Zn = -real(s)./abs(s);

        % Estimate process noise.
        w = filter(a,1,y);

        % Estimate model residuals.
        e = filter(a,1,x);

        % Extract individual feature values.
        Coef1 = a(2);
        Coef2 = a(3);
        AIC = log(Ep) + 2*p/N;
        Coef3 = a(4);
        Freq1 = Fn(1);
        Mean = mean(e,'omitnan');
        RMS = rms(e,'omitnan');

        % Concatenate signal features.
        featureValues = [Coef1, Coef2, Coef3, AIC, Freq1,Mean,RMS];

        % Package computed features into a table.
        featureNames = {'Coef1','Coef2','Coef3','AIC','Freq1','Mean','RMS'};
        Signal_tsmodel = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,4);
        featureNames = {'Coef1','Coef2','Coef3','AIC','Freq1','Mean','RMS'};
        Signal_tsmodel = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Signal_tsmodel},'VariableNames',{'Signal_tsmodel'})]; %#ok<AGROW>


    %% TimeSeriesModelFeatures
    try
        %% TimeSeriesModelFeatures
        % Compute model-based time series features.
        x = Signal.Signal2;
        t = Signal.Sample;
        y = x - mean(x,'omitnan');
        N = numel(x);

        % Estimate autoregressive model.
        p = 5;
        R = xcorr(y,p,'biased');
        R(1:p) = [];
        a = zeros(1, p+1);
        [tmp_a,Ep] = levinson(R,p);
        a(1:end) = tmp_a(1:numel(a));

        % Compute effective sampling rate.
        tNumeric = time2num(t,"seconds");
        Fs = effectivefs(tNumeric);

        % Compute model poles.
        r = sort(roots(a),'descend');
        s = Fs*log(r);
        Fn = abs(s)/2/pi;
        Zn = -real(s)./abs(s);

        % Estimate process noise.
        w = filter(a,1,y);

        % Estimate model residuals.
        e = filter(a,1,x);

        % Extract individual feature values.
        Freq1 = Fn(1);
        Mean = mean(e,'omitnan');
        RMS = rms(e,'omitnan');

        % Concatenate signal features.
        featureValues = [Freq1,Mean,RMS];

        % Package computed features into a table.
        featureNames = {'Freq1','Mean','RMS'};
        Signal_tsmodel_1 = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,3);
        featureNames = {'Freq1','Mean','RMS'};
        Signal_tsmodel_1 = array2table(featureValues,'VariableNames',featureNames);

    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Signal_tsmodel_1},'VariableNames',{'Signal_tsmodel_1'})]; %#ok<AGROW>


    %% TimeSeriesFeatures
    try
        % Compute time series features.
        inputSignal = Signal.Signal3;

        N = 10;
        acf = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        acf = acf(N+2:end)';

        N = 5;
        rho = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        rho = rho(N+1:end);
        pacf = zeros(1,N);
        for L = 1:N
            ar = levinson(rho(1:L+1), L+1);
            pacf(L) = -ar(end);
        end

        % Extract individual feature values.
        ACF1 = acf(1);
        PACF1 = pacf(1);

        % Concatenate signal features.
        featureValues = [ACF1,PACF1];

        % Package computed features into a table.
        featureNames = {'ACF1','PACF1'};
        Signal_tsfeat = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,2);
        featureNames = {'ACF1','PACF1'};
        Signal_tsfeat = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Signal_tsfeat},'VariableNames',{'Signal_tsfeat'})]; %#ok<AGROW>

    %% TimeSeriesModelFeatures
    try
        % Compute model-based time series features.
        x = Signal.Signal3;
        t = Signal.Sample;
        y = x - mean(x,'omitnan');
        N = numel(x);

        % Estimate autoregressive model.
        p = 5;
        R = xcorr(y,p,'biased');
        R(1:p) = [];
        [a,Ep] = levinson(R,p);

        % Compute effective sampling rate.
        tNumeric = time2num(t,"seconds");
        Fs = effectivefs(tNumeric);

        % Compute model poles.
        r = sort(roots(a),'descend');
        s = Fs*log(r);
        Fn = abs(s)/2/pi;
        Zn = -real(s)./abs(s);

        % Estimate process noise.
        w = filter(a,1,y);

        % Estimate model residuals.
        e = filter(a,1,x);

        % Extract individual feature values.
        Freq1 = Fn(1);
        AIC = log(Ep) + 2*p/N;
        Mean = mean(e,'omitnan');
        RMS = rms(e,'omitnan');

        % Concatenate signal features.
        featureValues = [Freq1,AIC,Mean,RMS];

        % Package computed features into a table.
        featureNames = {'Freq1','AIC','Mean','RMS'};
        Signal_tsmodel_2 = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,4);
        featureNames = {'Freq1','AIC','Mean','RMS'};
        Signal_tsmodel_2 = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Signal_tsmodel_2},'VariableNames',{'Signal_tsmodel_2'})]; %#ok<AGROW>

    %% TimeSeriesFeatures
    try
        % Compute time series features.
        inputSignal = Signal.Signal3;

        N = 10;
        acf = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        acf = acf(N+2:end)';

        N = 5;
        rho = xcorr(inputSignal-mean(inputSignal), N, 'coeff');
        rho = rho(N+1:end);
        pacf = zeros(1,N);
        for L = 1:N
            ar = levinson(rho(1:L+1), L+1);
            pacf(L) = -ar(end);
        end

        % Extract individual feature values.
        ACF1 = acf(1);
        PACF1 = pacf(1);

        % Concatenate signal features.
        featureValues = [ACF1,PACF1];

        % Package computed features into a table.
        featureNames = {'ACF1','PACF1'};
        Signal_tsfeat_2 = array2table(featureValues,'VariableNames',featureNames);
    catch
        % Package computed features into a table.
        featureValues = NaN(1,2);
        featureNames = {'ACF1','PACF1'};
        Signal_tsfeat_2 = array2table(featureValues,'VariableNames',featureNames);
    end

    % Append computed results to the member table.
    memberResult = [memberResult, ...
        table({Signal_tsfeat_2},'VariableNames',{'Signal_tsfeat_2'})]; %#ok<AGROW>

    %% Write all the results for the current member to the ensemble.
    writeToLastMemberRead(outputEnsemble,memberResult)
end

% Gather all features into a table.
selectedFeatureNames = ["Signal_tsmodel/Coef1","Signal_tsmodel/Coef2",...
    "Signal_tsmodel/Coef3","Signal_tsmodel/AIC","Signal_tsmodel/Freq1",...
    "Signal_tsmodel/Mean","Signal_tsmodel/RMS","Signal_tsmodel_1/Freq1",...
    "Signal_tsmodel_1/Mean", "Signal_tsmodel_1/RMS",...
    "Signal_tsfeat/ACF1","Signal_tsfeat/PACF1",...
    "Signal_tsmodel_2/Freq1","Signal_tsmodel_2/AIC",...
    "Signal_tsmodel_2/Mean","Signal_tsmodel_2/RMS",...
    "Signal_tsfeat_2/ACF1","Signal_tsfeat_2/PACF1",
    ];
featureTable = readFeatureTable(outputEnsemble,'Features',selectedFeatureNames);
end

% LocalWords:  tsmodel Coef tsfeat ACF PACF omitnan
